/* Visit https://aka.ms/tsconfig to read more about this file */
{
  "extends": "./tsconfig.checks.json",
  "compilerOptions": {
    /* Language and Environment */
    "target": "esnext"                              /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    // "experimentalDecorators": true,              /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,               /* Emit design-type metadata for decorated declarations in source files. */

    /* Modules */
    "module": "preserve"                            /* Specify what module code is generated. */,
    "moduleResolution": "bundler"                   /* Specify how TypeScript looks up a file from a given module specifier. */,
    // "resolvePackageJsonExports": true,           /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,           /* Use the package.json 'imports' field when resolving imports. */
    "resolveJsonModule": true                       /* Enable importing .json files. */,

    /* Emit */
    "removeComments": true                          /* Disable emitting comments. */,

    /* Interop Constraints */
    "isolatedModules": true                         /* Ensure that each file can be safely transpiled without relying on other imports. */,
    // "verbatimModuleSyntax": true,                /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "allowSyntheticDefaultImports": true,        /* Allow 'import x from y' when a module doesn't have a default export. */
    // "esModuleInterop": true,                     /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                    /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true        /* Ensure that casing is correct in imports. */,

    /* Completeness */
    "skipLibCheck": true                            /* Skip type checking all .d.ts files. */
  }
}
